
////////////////////////////////////////////////////////////////////////////////
// These are the functions which can be called directly in a script advancement file.
////////////////////////////////////////////////////////////////////////////////


// Sets the parent for the advancement. This only effects its position on the 
// advancement page, by default the parent is not required for the advancement to 
// be completed. This is required for non-root advancements.
// setParent( String:path/to/parent )
setParent("triumph:examples/root")

// Sets the x and y coordinates of the advancement.
// setPos(float:x_pos, float:y_pos)
setPos(0, 0)
    
// This is a helper method which adds a criteria called "completedParent" with 
// type "triumph:completed_advancement" with the parent advancements name, and 
// makes it a requirement. This effectively makes the advancement require its 
// parent to be completed before it can be completed.
// setRequiresParent(bool)
setRequiresParent(true)

// Adds a Skillable skill level up reward.
// addRewardSkillable(String:skill, int:levels)
addRewardSkillable("mining", 1)

// Adds the function with the provided name as a reward for completing the advancement.
// addRewardFunction(String:function name)
addRewardFunction("triumph:happy_birthday")
        
// Sets the experience amount for the reward for completing the advancement.  
//This is in xp, not in levels.
// setRewardExperience(int:experience)
setRewardExperience(42)

// Sets the uncompleted icon color for the advancement. Requires the Better Advancements mod.
// setUncompletedIconColor(int:red, int:green, int:blue)
setUncompletedIconColor(128, 64, 200)

// Sets the uncompleted icon color for the advancement. Requires the Better Advancements mod.
// setUncompletedIconColor(int:color)
setUncompletedIconColor(25)
        
// Sets the completed icon color for the advancement. Requires the Better Advancements mod.
// setCompletedIconColor(int:red, int:green, int:blue)
setCompletedIconColor(128, 64, 200)

// Sets the completed icon color for the advancement. Requires the Better Advancements mod.
// setCompletedIconColor(int:color)
setCompletedIconColor(25)
        
// Sets the uncompleted line color for the advancement. Requires the Better Advancements mod.
// setUncompletedLineColor(int:red, int:green, int:blue)
setUncompletedLineColor(128, 64, 200)
        
// Sets the uncompleted line color for the advancement. Requires the Better Advancements mod.
// setUncompletedLineColor(int:color)
setUncompletedLineColor(25)
        
// Sets the uncompleted title color for the advancement. Requires the Better Advancements mod.
// setUncompletedTitleColor(int:red, int:green, int:blue)
setUncompletedTitleColor(128, 64, 200)
        
// Sets the uncompleted title color for the advancement. Requires the Better Advancements mod.
// setUncompletedTitleColor(int:color)
setUncompletedTitleColor(25)
        
// Sets the translated title for the advancement. Used for localization. This or setTitle is required.
// setTranslatedTitle(String:title translation path)
setTranslatedTitle("Triumph:translations/title_de")
        
// Sets the description for the advancement. Used for localization. This or setDescription is required.
// setTranslatedDescription(String:description translation path)
setTranslatedDescription("Triumph:translations/description_de")
        
// Sets the completed title color for the advancement. Requires the Better Advancements mod.
// setCompletedTitleColor(int:color)
setCompletedTitleColor(25)
        
// Sets the completed title color for the advancement. Requires the Better Advancements mod.
// setCompletedTitleColor(int:red, int:green, int:blue)
setCompletedTitleColor(128, 64, 200)
        
// Sets the completed line color for the advancement. Requires the Better Advancements mod.
// setCompletedLineColor(int:red, int:green, int:blue)
setCompletedLineColor(128, 64, 200)
        
// Sets the completed line color for the advancement. Requires the Better Advancements mod.
// setCompletedLineColor(int:color)
setCompletedLineColor(25)
        
// Sets if the advancement completion should be announced in chat.
// setAnnounceToChat(bool)
setAnnounceToChat(true)
        
// Sets the description for the advancement. This or setTranslatedDescription is required.
// setDescription(String:description)
setDescription("This is a description")
        
// Sets the background for the advancement page. This is required and only used by root advancements. Be aware the background is tiled.
// setBackground(String:path to resource)
setBackground("minecraft:textures/gui/advancements/backgrounds/adventure.png")
        
// Sets the title for the advancement. This or setTranslatedTitle is required.
// setTitle(String:title)
setTitle("Title goes here")
        
// Sets the item icon for the advancement. This is required.
// setIcon(ItemBlockData:item data)
setIcon(<minecraft:flint>)
        
// This is a helper method designed to make setting criteria requirements easier. 
// If set to "all" this will make all criteria required for completion. If set to 
// "any" this will make any criteria complete the advancement. If set to "any" the 
// array of criteria exceptions is used to configure the requirements where all 
// exceptions are required plus any other single criteria.
// setRequirements(String:requirements type, String array:criteria exceptions)
setRequirements("any", "")
        
// This is a helper method designed to make setting criteria requirements easier. 
// If set to "all" this will make all criteria required for completion. If set to 
// "any" this will make any criteria complete the advancement.
// setRequirements(String:requirements type)
setRequirements("all")
        
// This is the manual way of adding requirements. The array of criteria requirements 
// will be added as a requirement array. This is done in basically the same way 
// as vanilla Json advancements, where an array of requirements is a group of criteria 
// that, if all are completed, the advancement is completed. Multiple arrays can 
// be added by calling this function multiple times.
// addRequirements(String array:criteria requirements)
addRequirements("")

// Sets the frame type for the advancement. Options are "TASK", "CHALLENGE", "GOAL". Default is TASK.
// setFrameType(String:frame type)
setFrameType("TASK")
        
// Sets if the advancement should draw direct lines to parents. Requires the Better Advancements mod.
// drawDirectLines(bool)
drawDirectLines(true)
        
// Adds a criteria to the advancement with the specified type. Returns the criteria object for use as a variable.
// addCriteria(String:criteria name, String:criteria trigger)
addCriteria("location", "minecraft:location")
        
// Sets if a toast should be shown to the player when the advancement is completed.
// setShowToast(bool)
setShowToast(bool)        

// Sets the item reward for completing this advancement.
// setRewardItem(ItemBlockData:item data)
setRewardItem(<minecraft:stick, nbt:{ench:[{lvl:1s,id:51s}],display:{Name:"The Stick of Truth"}}>)

// Adds a recipe as a reward for completing the advancement. You can get the name of the recipe you want to grant from NEI or JEI.
// addRewardRecipe(String:recipe name)
addRewardRecipe("minecraft:ender_eye")

// Sets if the advancement should be hidden until it is completed.
// setHidden(bool)
setHidden(bool)
        

